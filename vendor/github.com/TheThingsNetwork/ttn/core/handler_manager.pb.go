// Code generated by protoc-gen-gogo.
// source: handler_manager.proto
// DO NOT EDIT!

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UpsertOTAAHandlerReq struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
	DevEUI []byte `protobuf:"bytes,3,opt,name=DevEUI,proto3" json:"DevEUI,omitempty"`
	AppKey []byte `protobuf:"bytes,4,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
}

func (m *UpsertOTAAHandlerReq) Reset()         { *m = UpsertOTAAHandlerReq{} }
func (m *UpsertOTAAHandlerReq) String() string { return proto.CompactTextString(m) }
func (*UpsertOTAAHandlerReq) ProtoMessage()    {}
func (*UpsertOTAAHandlerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{0}
}

type UpsertOTAAHandlerRes struct {
}

func (m *UpsertOTAAHandlerRes) Reset()         { *m = UpsertOTAAHandlerRes{} }
func (m *UpsertOTAAHandlerRes) String() string { return proto.CompactTextString(m) }
func (*UpsertOTAAHandlerRes) ProtoMessage()    {}
func (*UpsertOTAAHandlerRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{1}
}

type DeleteOTAAHandlerReq struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
	DevEUI []byte `protobuf:"bytes,3,opt,name=DevEUI,proto3" json:"DevEUI,omitempty"`
}

func (m *DeleteOTAAHandlerReq) Reset()         { *m = DeleteOTAAHandlerReq{} }
func (m *DeleteOTAAHandlerReq) String() string { return proto.CompactTextString(m) }
func (*DeleteOTAAHandlerReq) ProtoMessage()    {}
func (*DeleteOTAAHandlerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{2}
}

type DeleteOTAAHandlerRes struct {
}

func (m *DeleteOTAAHandlerRes) Reset()         { *m = DeleteOTAAHandlerRes{} }
func (m *DeleteOTAAHandlerRes) String() string { return proto.CompactTextString(m) }
func (*DeleteOTAAHandlerRes) ProtoMessage()    {}
func (*DeleteOTAAHandlerRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{3}
}

type UpsertABPHandlerReq struct {
	Token   string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI  []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
	DevAddr []byte `protobuf:"bytes,3,opt,name=DevAddr,proto3" json:"DevAddr,omitempty"`
	NwkSKey []byte `protobuf:"bytes,4,opt,name=NwkSKey,proto3" json:"NwkSKey,omitempty"`
	AppSKey []byte `protobuf:"bytes,5,opt,name=AppSKey,proto3" json:"AppSKey,omitempty"`
	Flags   uint32 `protobuf:"varint,6,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (m *UpsertABPHandlerReq) Reset()         { *m = UpsertABPHandlerReq{} }
func (m *UpsertABPHandlerReq) String() string { return proto.CompactTextString(m) }
func (*UpsertABPHandlerReq) ProtoMessage()    {}
func (*UpsertABPHandlerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{4}
}

type UpsertABPHandlerRes struct {
}

func (m *UpsertABPHandlerRes) Reset()         { *m = UpsertABPHandlerRes{} }
func (m *UpsertABPHandlerRes) String() string { return proto.CompactTextString(m) }
func (*UpsertABPHandlerRes) ProtoMessage()    {}
func (*UpsertABPHandlerRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{5}
}

type DeleteABPHandlerReq struct {
	Token   string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI  []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
	DevAddr []byte `protobuf:"bytes,3,opt,name=DevAddr,proto3" json:"DevAddr,omitempty"`
}

func (m *DeleteABPHandlerReq) Reset()         { *m = DeleteABPHandlerReq{} }
func (m *DeleteABPHandlerReq) String() string { return proto.CompactTextString(m) }
func (*DeleteABPHandlerReq) ProtoMessage()    {}
func (*DeleteABPHandlerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{6}
}

type DeleteABPHandlerRes struct {
}

func (m *DeleteABPHandlerRes) Reset()         { *m = DeleteABPHandlerRes{} }
func (m *DeleteABPHandlerRes) String() string { return proto.CompactTextString(m) }
func (*DeleteABPHandlerRes) ProtoMessage()    {}
func (*DeleteABPHandlerRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{7}
}

type ListDevicesHandlerReq struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
}

func (m *ListDevicesHandlerReq) Reset()         { *m = ListDevicesHandlerReq{} }
func (m *ListDevicesHandlerReq) String() string { return proto.CompactTextString(m) }
func (*ListDevicesHandlerReq) ProtoMessage()    {}
func (*ListDevicesHandlerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{8}
}

type ListDevicesHandlerRes struct {
	OTAA []*HandlerOTAADevice `protobuf:"bytes,1,rep,name=OTAA" json:"OTAA,omitempty"`
	ABP  []*HandlerABPDevice  `protobuf:"bytes,2,rep,name=ABP" json:"ABP,omitempty"`
}

func (m *ListDevicesHandlerRes) Reset()         { *m = ListDevicesHandlerRes{} }
func (m *ListDevicesHandlerRes) String() string { return proto.CompactTextString(m) }
func (*ListDevicesHandlerRes) ProtoMessage()    {}
func (*ListDevicesHandlerRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{9}
}

func (m *ListDevicesHandlerRes) GetOTAA() []*HandlerOTAADevice {
	if m != nil {
		return m.OTAA
	}
	return nil
}

func (m *ListDevicesHandlerRes) GetABP() []*HandlerABPDevice {
	if m != nil {
		return m.ABP
	}
	return nil
}

type HandlerABPDevice struct {
	DevAddr  []byte `protobuf:"bytes,2,opt,name=DevAddr,proto3" json:"DevAddr,omitempty"`
	NwkSKey  []byte `protobuf:"bytes,3,opt,name=NwkSKey,proto3" json:"NwkSKey,omitempty"`
	AppSKey  []byte `protobuf:"bytes,4,opt,name=AppSKey,proto3" json:"AppSKey,omitempty"`
	FCntUp   uint32 `protobuf:"varint,5,opt,name=FCntUp,proto3" json:"FCntUp,omitempty"`
	FCntDown uint32 `protobuf:"varint,6,opt,name=FCntDown,proto3" json:"FCntDown,omitempty"`
	Flags    uint32 `protobuf:"varint,7,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (m *HandlerABPDevice) Reset()                    { *m = HandlerABPDevice{} }
func (m *HandlerABPDevice) String() string            { return proto.CompactTextString(m) }
func (*HandlerABPDevice) ProtoMessage()               {}
func (*HandlerABPDevice) Descriptor() ([]byte, []int) { return fileDescriptorHandlerManager, []int{10} }

type HandlerOTAADevice struct {
	DevEUI   []byte `protobuf:"bytes,1,opt,name=DevEUI,proto3" json:"DevEUI,omitempty"`
	DevAddr  []byte `protobuf:"bytes,2,opt,name=DevAddr,proto3" json:"DevAddr,omitempty"`
	NwkSKey  []byte `protobuf:"bytes,3,opt,name=NwkSKey,proto3" json:"NwkSKey,omitempty"`
	AppSKey  []byte `protobuf:"bytes,4,opt,name=AppSKey,proto3" json:"AppSKey,omitempty"`
	AppKey   []byte `protobuf:"bytes,5,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
	FCntUp   uint32 `protobuf:"varint,7,opt,name=FCntUp,proto3" json:"FCntUp,omitempty"`
	FCntDown uint32 `protobuf:"varint,8,opt,name=FCntDown,proto3" json:"FCntDown,omitempty"`
}

func (m *HandlerOTAADevice) Reset()                    { *m = HandlerOTAADevice{} }
func (m *HandlerOTAADevice) String() string            { return proto.CompactTextString(m) }
func (*HandlerOTAADevice) ProtoMessage()               {}
func (*HandlerOTAADevice) Descriptor() ([]byte, []int) { return fileDescriptorHandlerManager, []int{11} }

type GetDefaultDeviceReq struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
}

func (m *GetDefaultDeviceReq) Reset()         { *m = GetDefaultDeviceReq{} }
func (m *GetDefaultDeviceReq) String() string { return proto.CompactTextString(m) }
func (*GetDefaultDeviceReq) ProtoMessage()    {}
func (*GetDefaultDeviceReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{12}
}

type GetDefaultDeviceRes struct {
	AppKey []byte `protobuf:"bytes,1,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
}

func (m *GetDefaultDeviceRes) Reset()         { *m = GetDefaultDeviceRes{} }
func (m *GetDefaultDeviceRes) String() string { return proto.CompactTextString(m) }
func (*GetDefaultDeviceRes) ProtoMessage()    {}
func (*GetDefaultDeviceRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{13}
}

type SetDefaultDeviceReq struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
	AppKey []byte `protobuf:"bytes,3,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
}

func (m *SetDefaultDeviceReq) Reset()         { *m = SetDefaultDeviceReq{} }
func (m *SetDefaultDeviceReq) String() string { return proto.CompactTextString(m) }
func (*SetDefaultDeviceReq) ProtoMessage()    {}
func (*SetDefaultDeviceReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{14}
}

type GetPayloadFunctionsReq struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
}

func (m *GetPayloadFunctionsReq) Reset()         { *m = GetPayloadFunctionsReq{} }
func (m *GetPayloadFunctionsReq) String() string { return proto.CompactTextString(m) }
func (*GetPayloadFunctionsReq) ProtoMessage()    {}
func (*GetPayloadFunctionsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{15}
}

type GetPayloadFunctionsRes struct {
	Decoder   string `protobuf:"bytes,1,opt,name=Decoder,proto3" json:"Decoder,omitempty"`
	Converter string `protobuf:"bytes,2,opt,name=Converter,proto3" json:"Converter,omitempty"`
	Validator string `protobuf:"bytes,3,opt,name=Validator,proto3" json:"Validator,omitempty"`
}

func (m *GetPayloadFunctionsRes) Reset()         { *m = GetPayloadFunctionsRes{} }
func (m *GetPayloadFunctionsRes) String() string { return proto.CompactTextString(m) }
func (*GetPayloadFunctionsRes) ProtoMessage()    {}
func (*GetPayloadFunctionsRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{16}
}

type SetPayloadFunctionsReq struct {
	Token     string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI    []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
	Decoder   string `protobuf:"bytes,11,opt,name=Decoder,proto3" json:"Decoder,omitempty"`
	Converter string `protobuf:"bytes,12,opt,name=Converter,proto3" json:"Converter,omitempty"`
	Validator string `protobuf:"bytes,13,opt,name=Validator,proto3" json:"Validator,omitempty"`
}

func (m *SetPayloadFunctionsReq) Reset()         { *m = SetPayloadFunctionsReq{} }
func (m *SetPayloadFunctionsReq) String() string { return proto.CompactTextString(m) }
func (*SetPayloadFunctionsReq) ProtoMessage()    {}
func (*SetPayloadFunctionsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{17}
}

type SetPayloadFunctionsRes struct {
}

func (m *SetPayloadFunctionsRes) Reset()         { *m = SetPayloadFunctionsRes{} }
func (m *SetPayloadFunctionsRes) String() string { return proto.CompactTextString(m) }
func (*SetPayloadFunctionsRes) ProtoMessage()    {}
func (*SetPayloadFunctionsRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{18}
}

type TestPayloadFunctionsReq struct {
	Token     string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AppEUI    []byte `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
	Payload   []byte `protobuf:"bytes,11,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Decoder   string `protobuf:"bytes,21,opt,name=Decoder,proto3" json:"Decoder,omitempty"`
	Converter string `protobuf:"bytes,22,opt,name=Converter,proto3" json:"Converter,omitempty"`
	Validator string `protobuf:"bytes,23,opt,name=Validator,proto3" json:"Validator,omitempty"`
}

func (m *TestPayloadFunctionsReq) Reset()         { *m = TestPayloadFunctionsReq{} }
func (m *TestPayloadFunctionsReq) String() string { return proto.CompactTextString(m) }
func (*TestPayloadFunctionsReq) ProtoMessage()    {}
func (*TestPayloadFunctionsReq) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{19}
}

type TestPayloadFunctionsRes struct {
	Fields string `protobuf:"bytes,1,opt,name=Fields,proto3" json:"Fields,omitempty"`
	Valid  bool   `protobuf:"varint,2,opt,name=Valid,proto3" json:"Valid,omitempty"`
}

func (m *TestPayloadFunctionsRes) Reset()         { *m = TestPayloadFunctionsRes{} }
func (m *TestPayloadFunctionsRes) String() string { return proto.CompactTextString(m) }
func (*TestPayloadFunctionsRes) ProtoMessage()    {}
func (*TestPayloadFunctionsRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{20}
}

type SetDefaultDeviceRes struct {
}

func (m *SetDefaultDeviceRes) Reset()         { *m = SetDefaultDeviceRes{} }
func (m *SetDefaultDeviceRes) String() string { return proto.CompactTextString(m) }
func (*SetDefaultDeviceRes) ProtoMessage()    {}
func (*SetDefaultDeviceRes) Descriptor() ([]byte, []int) {
	return fileDescriptorHandlerManager, []int{21}
}

func init() {
	proto.RegisterType((*UpsertOTAAHandlerReq)(nil), "core.UpsertOTAAHandlerReq")
	proto.RegisterType((*UpsertOTAAHandlerRes)(nil), "core.UpsertOTAAHandlerRes")
	proto.RegisterType((*DeleteOTAAHandlerReq)(nil), "core.DeleteOTAAHandlerReq")
	proto.RegisterType((*DeleteOTAAHandlerRes)(nil), "core.DeleteOTAAHandlerRes")
	proto.RegisterType((*UpsertABPHandlerReq)(nil), "core.UpsertABPHandlerReq")
	proto.RegisterType((*UpsertABPHandlerRes)(nil), "core.UpsertABPHandlerRes")
	proto.RegisterType((*DeleteABPHandlerReq)(nil), "core.DeleteABPHandlerReq")
	proto.RegisterType((*DeleteABPHandlerRes)(nil), "core.DeleteABPHandlerRes")
	proto.RegisterType((*ListDevicesHandlerReq)(nil), "core.ListDevicesHandlerReq")
	proto.RegisterType((*ListDevicesHandlerRes)(nil), "core.ListDevicesHandlerRes")
	proto.RegisterType((*HandlerABPDevice)(nil), "core.HandlerABPDevice")
	proto.RegisterType((*HandlerOTAADevice)(nil), "core.HandlerOTAADevice")
	proto.RegisterType((*GetDefaultDeviceReq)(nil), "core.GetDefaultDeviceReq")
	proto.RegisterType((*GetDefaultDeviceRes)(nil), "core.GetDefaultDeviceRes")
	proto.RegisterType((*SetDefaultDeviceReq)(nil), "core.SetDefaultDeviceReq")
	proto.RegisterType((*GetPayloadFunctionsReq)(nil), "core.GetPayloadFunctionsReq")
	proto.RegisterType((*GetPayloadFunctionsRes)(nil), "core.GetPayloadFunctionsRes")
	proto.RegisterType((*SetPayloadFunctionsReq)(nil), "core.SetPayloadFunctionsReq")
	proto.RegisterType((*SetPayloadFunctionsRes)(nil), "core.SetPayloadFunctionsRes")
	proto.RegisterType((*TestPayloadFunctionsReq)(nil), "core.TestPayloadFunctionsReq")
	proto.RegisterType((*TestPayloadFunctionsRes)(nil), "core.TestPayloadFunctionsRes")
	proto.RegisterType((*SetDefaultDeviceRes)(nil), "core.SetDefaultDeviceRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for HandlerManager service

type HandlerManagerClient interface {
	UpsertOTAA(ctx context.Context, in *UpsertOTAAHandlerReq, opts ...grpc.CallOption) (*UpsertOTAAHandlerRes, error)
	UpsertABP(ctx context.Context, in *UpsertABPHandlerReq, opts ...grpc.CallOption) (*UpsertABPHandlerRes, error)
	ListDevices(ctx context.Context, in *ListDevicesHandlerReq, opts ...grpc.CallOption) (*ListDevicesHandlerRes, error)
	DeleteOTAA(ctx context.Context, in *DeleteOTAAHandlerReq, opts ...grpc.CallOption) (*DeleteOTAAHandlerRes, error)
	DeleteABP(ctx context.Context, in *DeleteABPHandlerReq, opts ...grpc.CallOption) (*DeleteABPHandlerRes, error)
	GetDefaultDevice(ctx context.Context, in *GetDefaultDeviceReq, opts ...grpc.CallOption) (*GetDefaultDeviceRes, error)
	SetDefaultDevice(ctx context.Context, in *SetDefaultDeviceReq, opts ...grpc.CallOption) (*SetDefaultDeviceRes, error)
	GetPayloadFunctions(ctx context.Context, in *GetPayloadFunctionsReq, opts ...grpc.CallOption) (*GetPayloadFunctionsRes, error)
	SetPayloadFunctions(ctx context.Context, in *SetPayloadFunctionsReq, opts ...grpc.CallOption) (*SetPayloadFunctionsRes, error)
	TestPayloadFunctions(ctx context.Context, in *TestPayloadFunctionsReq, opts ...grpc.CallOption) (*TestPayloadFunctionsRes, error)
}

type handlerManagerClient struct {
	cc *grpc.ClientConn
}

func NewHandlerManagerClient(cc *grpc.ClientConn) HandlerManagerClient {
	return &handlerManagerClient{cc}
}

func (c *handlerManagerClient) UpsertOTAA(ctx context.Context, in *UpsertOTAAHandlerReq, opts ...grpc.CallOption) (*UpsertOTAAHandlerRes, error) {
	out := new(UpsertOTAAHandlerRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/UpsertOTAA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerManagerClient) UpsertABP(ctx context.Context, in *UpsertABPHandlerReq, opts ...grpc.CallOption) (*UpsertABPHandlerRes, error) {
	out := new(UpsertABPHandlerRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/UpsertABP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerManagerClient) ListDevices(ctx context.Context, in *ListDevicesHandlerReq, opts ...grpc.CallOption) (*ListDevicesHandlerRes, error) {
	out := new(ListDevicesHandlerRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/ListDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerManagerClient) DeleteOTAA(ctx context.Context, in *DeleteOTAAHandlerReq, opts ...grpc.CallOption) (*DeleteOTAAHandlerRes, error) {
	out := new(DeleteOTAAHandlerRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/DeleteOTAA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerManagerClient) DeleteABP(ctx context.Context, in *DeleteABPHandlerReq, opts ...grpc.CallOption) (*DeleteABPHandlerRes, error) {
	out := new(DeleteABPHandlerRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/DeleteABP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerManagerClient) GetDefaultDevice(ctx context.Context, in *GetDefaultDeviceReq, opts ...grpc.CallOption) (*GetDefaultDeviceRes, error) {
	out := new(GetDefaultDeviceRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/GetDefaultDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerManagerClient) SetDefaultDevice(ctx context.Context, in *SetDefaultDeviceReq, opts ...grpc.CallOption) (*SetDefaultDeviceRes, error) {
	out := new(SetDefaultDeviceRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/SetDefaultDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerManagerClient) GetPayloadFunctions(ctx context.Context, in *GetPayloadFunctionsReq, opts ...grpc.CallOption) (*GetPayloadFunctionsRes, error) {
	out := new(GetPayloadFunctionsRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/GetPayloadFunctions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerManagerClient) SetPayloadFunctions(ctx context.Context, in *SetPayloadFunctionsReq, opts ...grpc.CallOption) (*SetPayloadFunctionsRes, error) {
	out := new(SetPayloadFunctionsRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/SetPayloadFunctions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerManagerClient) TestPayloadFunctions(ctx context.Context, in *TestPayloadFunctionsReq, opts ...grpc.CallOption) (*TestPayloadFunctionsRes, error) {
	out := new(TestPayloadFunctionsRes)
	err := grpc.Invoke(ctx, "/core.HandlerManager/TestPayloadFunctions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HandlerManager service

type HandlerManagerServer interface {
	UpsertOTAA(context.Context, *UpsertOTAAHandlerReq) (*UpsertOTAAHandlerRes, error)
	UpsertABP(context.Context, *UpsertABPHandlerReq) (*UpsertABPHandlerRes, error)
	ListDevices(context.Context, *ListDevicesHandlerReq) (*ListDevicesHandlerRes, error)
	DeleteOTAA(context.Context, *DeleteOTAAHandlerReq) (*DeleteOTAAHandlerRes, error)
	DeleteABP(context.Context, *DeleteABPHandlerReq) (*DeleteABPHandlerRes, error)
	GetDefaultDevice(context.Context, *GetDefaultDeviceReq) (*GetDefaultDeviceRes, error)
	SetDefaultDevice(context.Context, *SetDefaultDeviceReq) (*SetDefaultDeviceRes, error)
	GetPayloadFunctions(context.Context, *GetPayloadFunctionsReq) (*GetPayloadFunctionsRes, error)
	SetPayloadFunctions(context.Context, *SetPayloadFunctionsReq) (*SetPayloadFunctionsRes, error)
	TestPayloadFunctions(context.Context, *TestPayloadFunctionsReq) (*TestPayloadFunctionsRes, error)
}

func RegisterHandlerManagerServer(s *grpc.Server, srv HandlerManagerServer) {
	s.RegisterService(&_HandlerManager_serviceDesc, srv)
}

func _HandlerManager_UpsertOTAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertOTAAHandlerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).UpsertOTAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/UpsertOTAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).UpsertOTAA(ctx, req.(*UpsertOTAAHandlerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerManager_UpsertABP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertABPHandlerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).UpsertABP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/UpsertABP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).UpsertABP(ctx, req.(*UpsertABPHandlerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerManager_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesHandlerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).ListDevices(ctx, req.(*ListDevicesHandlerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerManager_DeleteOTAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOTAAHandlerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).DeleteOTAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/DeleteOTAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).DeleteOTAA(ctx, req.(*DeleteOTAAHandlerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerManager_DeleteABP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteABPHandlerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).DeleteABP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/DeleteABP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).DeleteABP(ctx, req.(*DeleteABPHandlerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerManager_GetDefaultDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).GetDefaultDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/GetDefaultDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).GetDefaultDevice(ctx, req.(*GetDefaultDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerManager_SetDefaultDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).SetDefaultDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/SetDefaultDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).SetDefaultDevice(ctx, req.(*SetDefaultDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerManager_GetPayloadFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayloadFunctionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).GetPayloadFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/GetPayloadFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).GetPayloadFunctions(ctx, req.(*GetPayloadFunctionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerManager_SetPayloadFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPayloadFunctionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).SetPayloadFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/SetPayloadFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).SetPayloadFunctions(ctx, req.(*SetPayloadFunctionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandlerManager_TestPayloadFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestPayloadFunctionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).TestPayloadFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.HandlerManager/TestPayloadFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).TestPayloadFunctions(ctx, req.(*TestPayloadFunctionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HandlerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.HandlerManager",
	HandlerType: (*HandlerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertOTAA",
			Handler:    _HandlerManager_UpsertOTAA_Handler,
		},
		{
			MethodName: "UpsertABP",
			Handler:    _HandlerManager_UpsertABP_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _HandlerManager_ListDevices_Handler,
		},
		{
			MethodName: "DeleteOTAA",
			Handler:    _HandlerManager_DeleteOTAA_Handler,
		},
		{
			MethodName: "DeleteABP",
			Handler:    _HandlerManager_DeleteABP_Handler,
		},
		{
			MethodName: "GetDefaultDevice",
			Handler:    _HandlerManager_GetDefaultDevice_Handler,
		},
		{
			MethodName: "SetDefaultDevice",
			Handler:    _HandlerManager_SetDefaultDevice_Handler,
		},
		{
			MethodName: "GetPayloadFunctions",
			Handler:    _HandlerManager_GetPayloadFunctions_Handler,
		},
		{
			MethodName: "SetPayloadFunctions",
			Handler:    _HandlerManager_SetPayloadFunctions_Handler,
		},
		{
			MethodName: "TestPayloadFunctions",
			Handler:    _HandlerManager_TestPayloadFunctions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorHandlerManager,
}

func (m *UpsertOTAAHandlerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpsertOTAAHandlerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.DevEUI) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.DevEUI)))
		i += copy(data[i:], m.DevEUI)
	}
	if len(m.AppKey) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppKey)))
		i += copy(data[i:], m.AppKey)
	}
	return i, nil
}

func (m *UpsertOTAAHandlerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpsertOTAAHandlerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteOTAAHandlerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteOTAAHandlerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.DevEUI) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.DevEUI)))
		i += copy(data[i:], m.DevEUI)
	}
	return i, nil
}

func (m *DeleteOTAAHandlerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteOTAAHandlerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpsertABPHandlerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpsertABPHandlerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.DevAddr) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.DevAddr)))
		i += copy(data[i:], m.DevAddr)
	}
	if len(m.NwkSKey) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.NwkSKey)))
		i += copy(data[i:], m.NwkSKey)
	}
	if len(m.AppSKey) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppSKey)))
		i += copy(data[i:], m.AppSKey)
	}
	if m.Flags != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintHandlerManager(data, i, uint64(m.Flags))
	}
	return i, nil
}

func (m *UpsertABPHandlerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpsertABPHandlerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteABPHandlerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteABPHandlerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.DevAddr) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.DevAddr)))
		i += copy(data[i:], m.DevAddr)
	}
	return i, nil
}

func (m *DeleteABPHandlerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteABPHandlerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListDevicesHandlerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListDevicesHandlerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	return i, nil
}

func (m *ListDevicesHandlerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListDevicesHandlerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OTAA) > 0 {
		for _, msg := range m.OTAA {
			data[i] = 0xa
			i++
			i = encodeVarintHandlerManager(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ABP) > 0 {
		for _, msg := range m.ABP {
			data[i] = 0x12
			i++
			i = encodeVarintHandlerManager(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HandlerABPDevice) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *HandlerABPDevice) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DevAddr) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.DevAddr)))
		i += copy(data[i:], m.DevAddr)
	}
	if len(m.NwkSKey) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.NwkSKey)))
		i += copy(data[i:], m.NwkSKey)
	}
	if len(m.AppSKey) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppSKey)))
		i += copy(data[i:], m.AppSKey)
	}
	if m.FCntUp != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintHandlerManager(data, i, uint64(m.FCntUp))
	}
	if m.FCntDown != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintHandlerManager(data, i, uint64(m.FCntDown))
	}
	if m.Flags != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintHandlerManager(data, i, uint64(m.Flags))
	}
	return i, nil
}

func (m *HandlerOTAADevice) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *HandlerOTAADevice) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DevEUI) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.DevEUI)))
		i += copy(data[i:], m.DevEUI)
	}
	if len(m.DevAddr) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.DevAddr)))
		i += copy(data[i:], m.DevAddr)
	}
	if len(m.NwkSKey) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.NwkSKey)))
		i += copy(data[i:], m.NwkSKey)
	}
	if len(m.AppSKey) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppSKey)))
		i += copy(data[i:], m.AppSKey)
	}
	if len(m.AppKey) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppKey)))
		i += copy(data[i:], m.AppKey)
	}
	if m.FCntUp != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintHandlerManager(data, i, uint64(m.FCntUp))
	}
	if m.FCntDown != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintHandlerManager(data, i, uint64(m.FCntDown))
	}
	return i, nil
}

func (m *GetDefaultDeviceReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetDefaultDeviceReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	return i, nil
}

func (m *GetDefaultDeviceRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetDefaultDeviceRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppKey) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppKey)))
		i += copy(data[i:], m.AppKey)
	}
	return i, nil
}

func (m *SetDefaultDeviceReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetDefaultDeviceReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.AppKey) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppKey)))
		i += copy(data[i:], m.AppKey)
	}
	return i, nil
}

func (m *GetPayloadFunctionsReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetPayloadFunctionsReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	return i, nil
}

func (m *GetPayloadFunctionsRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetPayloadFunctionsRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Decoder) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Decoder)))
		i += copy(data[i:], m.Decoder)
	}
	if len(m.Converter) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Converter)))
		i += copy(data[i:], m.Converter)
	}
	if len(m.Validator) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Validator)))
		i += copy(data[i:], m.Validator)
	}
	return i, nil
}

func (m *SetPayloadFunctionsReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetPayloadFunctionsReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.Decoder) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Decoder)))
		i += copy(data[i:], m.Decoder)
	}
	if len(m.Converter) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Converter)))
		i += copy(data[i:], m.Converter)
	}
	if len(m.Validator) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Validator)))
		i += copy(data[i:], m.Validator)
	}
	return i, nil
}

func (m *SetPayloadFunctionsRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetPayloadFunctionsRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TestPayloadFunctionsReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TestPayloadFunctionsReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.Payload) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if len(m.Decoder) > 0 {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Decoder)))
		i += copy(data[i:], m.Decoder)
	}
	if len(m.Converter) > 0 {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Converter)))
		i += copy(data[i:], m.Converter)
	}
	if len(m.Validator) > 0 {
		data[i] = 0xba
		i++
		data[i] = 0x1
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Validator)))
		i += copy(data[i:], m.Validator)
	}
	return i, nil
}

func (m *TestPayloadFunctionsRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TestPayloadFunctionsRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandlerManager(data, i, uint64(len(m.Fields)))
		i += copy(data[i:], m.Fields)
	}
	if m.Valid {
		data[i] = 0x10
		i++
		if m.Valid {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetDefaultDeviceRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetDefaultDeviceRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64HandlerManager(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32HandlerManager(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHandlerManager(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *UpsertOTAAHandlerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.DevEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *UpsertOTAAHandlerRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteOTAAHandlerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.DevEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *DeleteOTAAHandlerRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpsertABPHandlerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.NwkSKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppSKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	if m.Flags != 0 {
		n += 1 + sovHandlerManager(uint64(m.Flags))
	}
	return n
}

func (m *UpsertABPHandlerRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteABPHandlerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *DeleteABPHandlerRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListDevicesHandlerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *ListDevicesHandlerRes) Size() (n int) {
	var l int
	_ = l
	if len(m.OTAA) > 0 {
		for _, e := range m.OTAA {
			l = e.Size()
			n += 1 + l + sovHandlerManager(uint64(l))
		}
	}
	if len(m.ABP) > 0 {
		for _, e := range m.ABP {
			l = e.Size()
			n += 1 + l + sovHandlerManager(uint64(l))
		}
	}
	return n
}

func (m *HandlerABPDevice) Size() (n int) {
	var l int
	_ = l
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.NwkSKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppSKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	if m.FCntUp != 0 {
		n += 1 + sovHandlerManager(uint64(m.FCntUp))
	}
	if m.FCntDown != 0 {
		n += 1 + sovHandlerManager(uint64(m.FCntDown))
	}
	if m.Flags != 0 {
		n += 1 + sovHandlerManager(uint64(m.Flags))
	}
	return n
}

func (m *HandlerOTAADevice) Size() (n int) {
	var l int
	_ = l
	l = len(m.DevEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.NwkSKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppSKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	if m.FCntUp != 0 {
		n += 1 + sovHandlerManager(uint64(m.FCntUp))
	}
	if m.FCntDown != 0 {
		n += 1 + sovHandlerManager(uint64(m.FCntDown))
	}
	return n
}

func (m *GetDefaultDeviceReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *GetDefaultDeviceRes) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *SetDefaultDeviceReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *GetPayloadFunctionsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *GetPayloadFunctionsRes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Decoder)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.Converter)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *SetPayloadFunctionsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.Decoder)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.Converter)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *SetPayloadFunctionsRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TestPayloadFunctionsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.Decoder)
	if l > 0 {
		n += 2 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.Converter)
	if l > 0 {
		n += 2 + l + sovHandlerManager(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 2 + l + sovHandlerManager(uint64(l))
	}
	return n
}

func (m *TestPayloadFunctionsRes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovHandlerManager(uint64(l))
	}
	if m.Valid {
		n += 2
	}
	return n
}

func (m *SetDefaultDeviceRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovHandlerManager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHandlerManager(x uint64) (n int) {
	return sovHandlerManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpsertOTAAHandlerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertOTAAHandlerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertOTAAHandlerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEUI = append(m.DevEUI[:0], data[iNdEx:postIndex]...)
			if m.DevEUI == nil {
				m.DevEUI = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = append(m.AppKey[:0], data[iNdEx:postIndex]...)
			if m.AppKey == nil {
				m.AppKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertOTAAHandlerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertOTAAHandlerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertOTAAHandlerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOTAAHandlerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOTAAHandlerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOTAAHandlerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEUI = append(m.DevEUI[:0], data[iNdEx:postIndex]...)
			if m.DevEUI == nil {
				m.DevEUI = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOTAAHandlerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOTAAHandlerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOTAAHandlerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertABPHandlerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertABPHandlerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertABPHandlerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], data[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppSKey = append(m.AppSKey[:0], data[iNdEx:postIndex]...)
			if m.AppSKey == nil {
				m.AppSKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Flags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertABPHandlerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertABPHandlerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertABPHandlerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteABPHandlerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteABPHandlerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteABPHandlerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteABPHandlerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteABPHandlerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteABPHandlerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesHandlerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesHandlerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesHandlerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesHandlerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesHandlerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesHandlerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OTAA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OTAA = append(m.OTAA, &HandlerOTAADevice{})
			if err := m.OTAA[len(m.OTAA)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ABP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ABP = append(m.ABP, &HandlerABPDevice{})
			if err := m.ABP[len(m.ABP)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandlerABPDevice) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandlerABPDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandlerABPDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], data[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppSKey = append(m.AppSKey[:0], data[iNdEx:postIndex]...)
			if m.AppSKey == nil {
				m.AppSKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntUp", wireType)
			}
			m.FCntUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FCntUp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntDown", wireType)
			}
			m.FCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Flags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandlerOTAADevice) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandlerOTAADevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandlerOTAADevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEUI = append(m.DevEUI[:0], data[iNdEx:postIndex]...)
			if m.DevEUI == nil {
				m.DevEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], data[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppSKey = append(m.AppSKey[:0], data[iNdEx:postIndex]...)
			if m.AppSKey == nil {
				m.AppSKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = append(m.AppKey[:0], data[iNdEx:postIndex]...)
			if m.AppKey == nil {
				m.AppKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntUp", wireType)
			}
			m.FCntUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FCntUp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntDown", wireType)
			}
			m.FCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FCntDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDefaultDeviceReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDefaultDeviceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDefaultDeviceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDefaultDeviceRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDefaultDeviceRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDefaultDeviceRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = append(m.AppKey[:0], data[iNdEx:postIndex]...)
			if m.AppKey == nil {
				m.AppKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDefaultDeviceReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDefaultDeviceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDefaultDeviceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = append(m.AppKey[:0], data[iNdEx:postIndex]...)
			if m.AppKey == nil {
				m.AppKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPayloadFunctionsReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPayloadFunctionsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPayloadFunctionsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPayloadFunctionsRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPayloadFunctionsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPayloadFunctionsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decoder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decoder = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Converter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Converter = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPayloadFunctionsReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPayloadFunctionsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPayloadFunctionsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decoder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decoder = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Converter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Converter = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPayloadFunctionsRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPayloadFunctionsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPayloadFunctionsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestPayloadFunctionsReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestPayloadFunctionsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestPayloadFunctionsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decoder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decoder = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Converter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Converter = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestPayloadFunctionsRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestPayloadFunctionsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestPayloadFunctionsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandlerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDefaultDeviceRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDefaultDeviceRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDefaultDeviceRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHandlerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandlerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHandlerManager(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHandlerManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHandlerManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHandlerManager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHandlerManager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHandlerManager(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHandlerManager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHandlerManager   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("handler_manager.proto", fileDescriptorHandlerManager) }

var fileDescriptorHandlerManager = []byte{
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xbe, 0xd3, 0xfc, 0xb4, 0x39, 0x6d, 0xaf, 0x7a, 0x27, 0x3f, 0xf5, 0xf5, 0xed, 0x8d, 0x22,
	0xaf, 0x22, 0x21, 0xba, 0x28, 0x4f, 0xe0, 0x34, 0x4d, 0x8a, 0xca, 0x4f, 0xb0, 0x53, 0x36, 0x80,
	0x90, 0x89, 0x87, 0x12, 0xd5, 0xd8, 0xc6, 0xe3, 0xa6, 0xea, 0x9b, 0xb0, 0x60, 0x8f, 0xc4, 0x0b,
	0xf0, 0x04, 0x48, 0x2c, 0x79, 0x04, 0x54, 0x1e, 0x83, 0x0d, 0x1a, 0xcf, 0x38, 0xb1, 0xd3, 0x19,
	0x4b, 0x94, 0x76, 0xd7, 0x33, 0xdf, 0xf1, 0x77, 0xbe, 0xaf, 0x67, 0xe6, 0x9c, 0x40, 0xf3, 0x8d,
	0xe3, 0xbb, 0x1e, 0x89, 0x5e, 0xbe, 0x75, 0x7c, 0xe7, 0x84, 0x44, 0xbb, 0x61, 0x14, 0xc4, 0x01,
	0x2e, 0x4f, 0x82, 0x88, 0x18, 0x31, 0x34, 0x8e, 0x43, 0x4a, 0xa2, 0xf8, 0xf1, 0xd8, 0x34, 0x0f,
	0x79, 0xa2, 0x45, 0xde, 0xe1, 0x06, 0x54, 0xc6, 0xc1, 0x29, 0xf1, 0x35, 0xd4, 0x41, 0xdd, 0x9a,
	0xc5, 0x03, 0xdc, 0x82, 0xaa, 0x19, 0x86, 0x07, 0xc7, 0xf7, 0xb5, 0x95, 0x0e, 0xea, 0x6e, 0x58,
	0x22, 0x62, 0xe7, 0x7d, 0x32, 0x63, 0xe7, 0x25, 0x7e, 0xce, 0x23, 0x91, 0x7f, 0x44, 0x2e, 0xb4,
	0xf2, 0x3c, 0xff, 0x88, 0x5c, 0x18, 0x2d, 0x69, 0x55, 0x6a, 0x3c, 0x87, 0x46, 0x9f, 0x78, 0x24,
	0x26, 0xb7, 0xa1, 0x86, 0x55, 0x95, 0xb0, 0x53, 0xe3, 0x23, 0x82, 0x3a, 0x97, 0x63, 0xf6, 0x46,
	0xd7, 0xae, 0xaa, 0xc1, 0x6a, 0x9f, 0xcc, 0x4c, 0xd7, 0x8d, 0x44, 0xd9, 0x34, 0x64, 0xc8, 0xa3,
	0xf3, 0x53, 0x7b, 0xf1, 0x6f, 0x48, 0x43, 0x86, 0x98, 0x61, 0x98, 0x20, 0x15, 0x8e, 0x88, 0x90,
	0xd5, 0x1e, 0x78, 0xce, 0x09, 0xd5, 0xaa, 0x1d, 0xd4, 0xdd, 0xb4, 0x78, 0x60, 0x34, 0x65, 0x42,
	0xa9, 0xf1, 0x02, 0xea, 0xdc, 0xd8, 0xad, 0xe8, 0x67, 0x55, 0xaf, 0xd2, 0x53, 0xe3, 0x00, 0x9a,
	0x0f, 0xa6, 0x34, 0xee, 0x93, 0xd9, 0x74, 0x42, 0xe8, 0x75, 0xeb, 0x1a, 0xbe, 0x9c, 0x86, 0xe2,
	0x3b, 0x50, 0x66, 0x8d, 0xd2, 0x50, 0xa7, 0xd4, 0x5d, 0xdf, 0xdb, 0xde, 0x65, 0xf7, 0x75, 0x57,
	0xe0, 0x0c, 0xe0, 0x5f, 0x58, 0x49, 0x12, 0xee, 0x42, 0xc9, 0xec, 0x8d, 0xb4, 0x95, 0x24, 0xb7,
	0x95, 0xcb, 0x35, 0x7b, 0x23, 0x91, 0xca, 0x52, 0x8c, 0x4f, 0x08, 0xb6, 0x96, 0x91, 0xac, 0xf9,
	0x15, 0x65, 0xf3, 0x4a, 0xca, 0xe6, 0x95, 0xf3, 0xcd, 0x6b, 0x41, 0x75, 0xb0, 0xef, 0xc7, 0xc7,
	0x61, 0xd2, 0xd5, 0x4d, 0x4b, 0x44, 0x58, 0x87, 0x35, 0xf6, 0x57, 0x3f, 0x38, 0xf7, 0x45, 0x5f,
	0xe7, 0xf1, 0xa2, 0xe1, 0xab, 0xd9, 0x86, 0x7f, 0x41, 0xf0, 0xcf, 0x15, 0xcb, 0x99, 0x0b, 0x8e,
	0x72, 0xcf, 0xed, 0xc6, 0x5d, 0x88, 0xc7, 0x5b, 0xc9, 0x3e, 0xde, 0x8c, 0xbb, 0x55, 0xa5, 0xbb,
	0xb5, 0xbc, 0x3b, 0x63, 0x1f, 0xea, 0x43, 0x12, 0xf7, 0xc9, 0x6b, 0xe7, 0xcc, 0x13, 0xad, 0xfe,
	0xfd, 0x9b, 0x72, 0x57, 0x46, 0x42, 0x33, 0x3a, 0x51, 0x6e, 0xc8, 0x3c, 0x83, 0xba, 0xfd, 0xa7,
	0x35, 0x33, 0xe4, 0xa5, 0x1c, 0xf9, 0x00, 0x5a, 0x43, 0x12, 0x8f, 0x9c, 0x0b, 0x2f, 0x70, 0xdc,
	0xc1, 0x99, 0x3f, 0x89, 0xa7, 0x81, 0x4f, 0xaf, 0x73, 0xfb, 0xe5, 0x3c, 0x94, 0x37, 0x73, 0x12,
	0xb8, 0x24, 0x12, 0x4c, 0x69, 0x88, 0x77, 0xa0, 0xb6, 0x1f, 0xf8, 0x33, 0x12, 0xc5, 0x84, 0x37,
	0xba, 0x66, 0x2d, 0x0e, 0x18, 0xfa, 0xd4, 0xf1, 0xa6, 0xae, 0x13, 0x07, 0xfc, 0x25, 0xd7, 0xac,
	0xc5, 0x81, 0xf1, 0x01, 0x41, 0xcb, 0xbe, 0x01, 0xe1, 0x59, 0x79, 0xeb, 0x05, 0xf2, 0x36, 0x0a,
	0xe5, 0x6d, 0x2e, 0xcb, 0xd3, 0x14, 0xea, 0xa8, 0xf1, 0x19, 0xc1, 0xf6, 0x98, 0xd0, 0x9b, 0x51,
	0x2e, 0x48, 0x12, 0xe5, 0x1b, 0x56, 0x1a, 0x66, 0x3d, 0x35, 0x0b, 0x3c, 0xb5, 0x0a, 0x3d, 0x6d,
	0x2f, 0x7b, 0x1a, 0xaa, 0x84, 0x27, 0x57, 0x77, 0x30, 0x25, 0x9e, 0x4b, 0x85, 0x72, 0x11, 0x31,
	0x43, 0xc9, 0xf7, 0x89, 0xf2, 0x35, 0x8b, 0x07, 0x6c, 0x0e, 0x5f, 0xbd, 0xd0, 0x74, 0xef, 0x67,
	0x05, 0xfe, 0x16, 0x33, 0xe2, 0x21, 0xdf, 0xf0, 0xb8, 0x0f, 0xb0, 0xd8, 0xaf, 0x58, 0xe7, 0xe3,
	0x50, 0xb6, 0xe7, 0x75, 0x35, 0x46, 0xb1, 0x09, 0xb5, 0xf9, 0xb6, 0xc1, 0xff, 0x66, 0x13, 0x73,
	0x7b, 0x46, 0x57, 0x42, 0x14, 0x0f, 0x61, 0x3d, 0x33, 0xdc, 0xf1, 0x7f, 0x3c, 0x53, 0xba, 0x36,
	0xf4, 0x02, 0x90, 0x32, 0x47, 0x8b, 0xdd, 0x9d, 0x3a, 0x92, 0xfd, 0x56, 0xd0, 0xd5, 0x58, 0xe2,
	0x68, 0xbe, 0xc9, 0x52, 0x47, 0x92, 0xcd, 0xa9, 0x2b, 0x21, 0x8a, 0x0f, 0x61, 0x6b, 0x79, 0x08,
	0xa5, 0x4c, 0x92, 0x09, 0xa7, 0x2b, 0xa1, 0x84, 0xc9, 0x56, 0x30, 0xd9, 0x6a, 0x26, 0xc9, 0x0d,
	0xc0, 0x4f, 0x92, 0xc1, 0xb8, 0x7c, 0xc1, 0xf0, 0xce, 0xbc, 0xb6, 0xe4, 0xd1, 0xe8, 0x45, 0x68,
	0x42, 0x69, 0xab, 0x29, 0xed, 0x42, 0x4a, 0xf9, 0x0b, 0xc6, 0x63, 0x68, 0xc8, 0xde, 0x01, 0xfe,
	0x9f, 0x7f, 0xa5, 0x78, 0xdc, 0x7a, 0x21, 0x4c, 0x7b, 0x5b, 0x5f, 0x2f, 0xdb, 0xe8, 0xdb, 0x65,
	0x1b, 0x7d, 0xbf, 0x6c, 0xa3, 0xf7, 0x3f, 0xda, 0x7f, 0xbd, 0xaa, 0x26, 0xbf, 0x6f, 0xef, 0xfd,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x56, 0xde, 0x0b, 0xbc, 0xf8, 0x0a, 0x00, 0x00,
}
