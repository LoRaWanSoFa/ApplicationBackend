// Code generated by protoc-gen-gogo.
// source: router.proto
// DO NOT EDIT!

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DataRouterReq struct {
	GatewayID []byte       `protobuf:"bytes,1,opt,name=GatewayID,proto3" json:"GatewayID,omitempty"`
	Payload   *LoRaWANData `protobuf:"bytes,2,opt,name=Payload" json:"Payload,omitempty"`
	Metadata  *Metadata    `protobuf:"bytes,3,opt,name=Metadata" json:"Metadata,omitempty"`
}

func (m *DataRouterReq) Reset()                    { *m = DataRouterReq{} }
func (m *DataRouterReq) String() string            { return proto.CompactTextString(m) }
func (*DataRouterReq) ProtoMessage()               {}
func (*DataRouterReq) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{0} }

func (m *DataRouterReq) GetPayload() *LoRaWANData {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DataRouterReq) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type DataRouterRes struct {
	Payload  *LoRaWANData `protobuf:"bytes,1,opt,name=Payload" json:"Payload,omitempty"`
	Metadata *Metadata    `protobuf:"bytes,2,opt,name=Metadata" json:"Metadata,omitempty"`
}

func (m *DataRouterRes) Reset()                    { *m = DataRouterRes{} }
func (m *DataRouterRes) String() string            { return proto.CompactTextString(m) }
func (*DataRouterRes) ProtoMessage()               {}
func (*DataRouterRes) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{1} }

func (m *DataRouterRes) GetPayload() *LoRaWANData {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DataRouterRes) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type StatsReq struct {
	GatewayID []byte         `protobuf:"bytes,1,opt,name=GatewayID,proto3" json:"GatewayID,omitempty"`
	Metadata  *StatsMetadata `protobuf:"bytes,2,opt,name=Metadata" json:"Metadata,omitempty"`
}

func (m *StatsReq) Reset()                    { *m = StatsReq{} }
func (m *StatsReq) String() string            { return proto.CompactTextString(m) }
func (*StatsReq) ProtoMessage()               {}
func (*StatsReq) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{2} }

func (m *StatsReq) GetMetadata() *StatsMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type StatsRes struct {
}

func (m *StatsRes) Reset()                    { *m = StatsRes{} }
func (m *StatsRes) String() string            { return proto.CompactTextString(m) }
func (*StatsRes) ProtoMessage()               {}
func (*StatsRes) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{3} }

type JoinRouterReq struct {
	GatewayID []byte    `protobuf:"bytes,1,opt,name=GatewayID,proto3" json:"GatewayID,omitempty"`
	AppEUI    []byte    `protobuf:"bytes,2,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
	DevEUI    []byte    `protobuf:"bytes,3,opt,name=DevEUI,proto3" json:"DevEUI,omitempty"`
	DevNonce  []byte    `protobuf:"bytes,4,opt,name=DevNonce,proto3" json:"DevNonce,omitempty"`
	MIC       []byte    `protobuf:"bytes,5,opt,name=MIC,proto3" json:"MIC,omitempty"`
	Metadata  *Metadata `protobuf:"bytes,6,opt,name=Metadata" json:"Metadata,omitempty"`
}

func (m *JoinRouterReq) Reset()                    { *m = JoinRouterReq{} }
func (m *JoinRouterReq) String() string            { return proto.CompactTextString(m) }
func (*JoinRouterReq) ProtoMessage()               {}
func (*JoinRouterReq) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{4} }

func (m *JoinRouterReq) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type JoinRouterRes struct {
	Payload  *LoRaWANJoinAccept `protobuf:"bytes,1,opt,name=Payload" json:"Payload,omitempty"`
	Metadata *Metadata          `protobuf:"bytes,2,opt,name=Metadata" json:"Metadata,omitempty"`
}

func (m *JoinRouterRes) Reset()                    { *m = JoinRouterRes{} }
func (m *JoinRouterRes) String() string            { return proto.CompactTextString(m) }
func (*JoinRouterRes) ProtoMessage()               {}
func (*JoinRouterRes) Descriptor() ([]byte, []int) { return fileDescriptorRouter, []int{5} }

func (m *JoinRouterRes) GetPayload() *LoRaWANJoinAccept {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *JoinRouterRes) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*DataRouterReq)(nil), "core.DataRouterReq")
	proto.RegisterType((*DataRouterRes)(nil), "core.DataRouterRes")
	proto.RegisterType((*StatsReq)(nil), "core.StatsReq")
	proto.RegisterType((*StatsRes)(nil), "core.StatsRes")
	proto.RegisterType((*JoinRouterReq)(nil), "core.JoinRouterReq")
	proto.RegisterType((*JoinRouterRes)(nil), "core.JoinRouterRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Router service

type RouterClient interface {
	HandleData(ctx context.Context, in *DataRouterReq, opts ...grpc.CallOption) (*DataRouterRes, error)
	HandleStats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsRes, error)
	HandleJoin(ctx context.Context, in *JoinRouterReq, opts ...grpc.CallOption) (*JoinRouterRes, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) HandleData(ctx context.Context, in *DataRouterReq, opts ...grpc.CallOption) (*DataRouterRes, error) {
	out := new(DataRouterRes)
	err := grpc.Invoke(ctx, "/core.Router/HandleData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) HandleStats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsRes, error) {
	out := new(StatsRes)
	err := grpc.Invoke(ctx, "/core.Router/HandleStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) HandleJoin(ctx context.Context, in *JoinRouterReq, opts ...grpc.CallOption) (*JoinRouterRes, error) {
	out := new(JoinRouterRes)
	err := grpc.Invoke(ctx, "/core.Router/HandleJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterServer interface {
	HandleData(context.Context, *DataRouterReq) (*DataRouterRes, error)
	HandleStats(context.Context, *StatsReq) (*StatsRes, error)
	HandleJoin(context.Context, *JoinRouterReq) (*JoinRouterRes, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_HandleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).HandleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Router/HandleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).HandleData(ctx, req.(*DataRouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_HandleStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).HandleStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Router/HandleStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).HandleStats(ctx, req.(*StatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_HandleJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).HandleJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Router/HandleJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).HandleJoin(ctx, req.(*JoinRouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleData",
			Handler:    _Router_HandleData_Handler,
		},
		{
			MethodName: "HandleStats",
			Handler:    _Router_HandleStats_Handler,
		},
		{
			MethodName: "HandleJoin",
			Handler:    _Router_HandleJoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorRouter,
}

func (m *DataRouterReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DataRouterReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.GatewayID)))
		i += copy(data[i:], m.GatewayID)
	}
	if m.Payload != nil {
		data[i] = 0x12
		i++
		i = encodeVarintRouter(data, i, uint64(m.Payload.Size()))
		n1, err := m.Payload.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Metadata != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintRouter(data, i, uint64(m.Metadata.Size()))
		n2, err := m.Metadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *DataRouterRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DataRouterRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(m.Payload.Size()))
		n3, err := m.Payload.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Metadata != nil {
		data[i] = 0x12
		i++
		i = encodeVarintRouter(data, i, uint64(m.Metadata.Size()))
		n4, err := m.Metadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *StatsReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatsReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.GatewayID)))
		i += copy(data[i:], m.GatewayID)
	}
	if m.Metadata != nil {
		data[i] = 0x12
		i++
		i = encodeVarintRouter(data, i, uint64(m.Metadata.Size()))
		n5, err := m.Metadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *StatsRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatsRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *JoinRouterReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *JoinRouterReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.GatewayID)))
		i += copy(data[i:], m.GatewayID)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.DevEUI) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.DevEUI)))
		i += copy(data[i:], m.DevEUI)
	}
	if len(m.DevNonce) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.DevNonce)))
		i += copy(data[i:], m.DevNonce)
	}
	if len(m.MIC) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintRouter(data, i, uint64(len(m.MIC)))
		i += copy(data[i:], m.MIC)
	}
	if m.Metadata != nil {
		data[i] = 0x32
		i++
		i = encodeVarintRouter(data, i, uint64(m.Metadata.Size()))
		n6, err := m.Metadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *JoinRouterRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *JoinRouterRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRouter(data, i, uint64(m.Payload.Size()))
		n7, err := m.Payload.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Metadata != nil {
		data[i] = 0x12
		i++
		i = encodeVarintRouter(data, i, uint64(m.Metadata.Size()))
		n8, err := m.Metadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func encodeFixed64Router(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Router(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRouter(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DataRouterReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.GatewayID)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *DataRouterRes) Size() (n int) {
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *StatsReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.GatewayID)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *StatsRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *JoinRouterReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.GatewayID)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	l = len(m.DevEUI)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	l = len(m.DevNonce)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	l = len(m.MIC)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *JoinRouterRes) Size() (n int) {
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func sovRouter(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRouter(x uint64) (n int) {
	return sovRouter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataRouterReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRouterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRouterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayID = append(m.GatewayID[:0], data[iNdEx:postIndex]...)
			if m.GatewayID == nil {
				m.GatewayID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &LoRaWANData{}
			}
			if err := m.Payload.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRouterRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRouterRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRouterRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &LoRaWANData{}
			}
			if err := m.Payload.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayID = append(m.GatewayID[:0], data[iNdEx:postIndex]...)
			if m.GatewayID == nil {
				m.GatewayID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &StatsMetadata{}
			}
			if err := m.Metadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRouterReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRouterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRouterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayID = append(m.GatewayID[:0], data[iNdEx:postIndex]...)
			if m.GatewayID == nil {
				m.GatewayID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEUI = append(m.DevEUI[:0], data[iNdEx:postIndex]...)
			if m.DevEUI == nil {
				m.DevEUI = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevNonce = append(m.DevNonce[:0], data[iNdEx:postIndex]...)
			if m.DevNonce == nil {
				m.DevNonce = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MIC = append(m.MIC[:0], data[iNdEx:postIndex]...)
			if m.MIC == nil {
				m.MIC = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRouterRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRouterRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRouterRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &LoRaWANJoinAccept{}
			}
			if err := m.Payload.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRouter(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRouter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRouter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRouter(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRouter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRouter   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("router.proto", fileDescriptorRouter) }

var fileDescriptorRouter = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x5d, 0x4a, 0xf3, 0x40,
	0x14, 0xfd, 0xa6, 0xed, 0x17, 0xeb, 0xed, 0x0f, 0x75, 0x04, 0x0d, 0x41, 0x42, 0xe9, 0x53, 0x51,
	0xac, 0x58, 0xc1, 0xf7, 0x6a, 0x44, 0x2b, 0xb6, 0x48, 0x44, 0xc4, 0xc7, 0x6b, 0x3a, 0xa0, 0x50,
	0x32, 0x31, 0x19, 0x5b, 0xba, 0x01, 0xd7, 0xe0, 0x0e, 0x5c, 0x82, 0x5b, 0xf0, 0xd1, 0x25, 0x48,
	0xdd, 0x88, 0xcc, 0x4c, 0xff, 0x46, 0x0b, 0x55, 0xdf, 0xe6, 0x9e, 0xb9, 0xf7, 0x9c, 0x9b, 0x73,
	0x32, 0x90, 0x8f, 0xf9, 0x83, 0x60, 0x71, 0x2d, 0x8a, 0xb9, 0xe0, 0x34, 0x13, 0xf0, 0x98, 0x39,
	0x85, 0x2e, 0x8f, 0xb1, 0x8f, 0xa1, 0x06, 0x1d, 0x90, 0xa0, 0x3e, 0x57, 0x1e, 0x09, 0x14, 0x3c,
	0x14, 0xe8, 0xab, 0x29, 0x9f, 0xdd, 0xd3, 0x0d, 0x58, 0x3e, 0x46, 0xc1, 0xfa, 0x38, 0x68, 0x7a,
	0x36, 0x29, 0x93, 0x6a, 0xde, 0x9f, 0x02, 0x74, 0x0b, 0x96, 0xce, 0x71, 0xd0, 0xe5, 0xd8, 0xb1,
	0x53, 0x65, 0x52, 0xcd, 0xd5, 0x57, 0x6a, 0x8a, 0xed, 0x8c, 0xfb, 0x78, 0xd5, 0x68, 0x2b, 0xaa,
	0x71, 0x07, 0xdd, 0x84, 0x6c, 0x8b, 0x09, 0xec, 0xa0, 0x40, 0x3b, 0xad, 0xba, 0x8b, 0xba, 0x7b,
	0x8c, 0xfa, 0x93, 0xfb, 0xca, 0xad, 0xb9, 0x47, 0x32, 0xab, 0x44, 0x7e, 0xa5, 0x94, 0x5a, 0xa0,
	0x74, 0x0d, 0xd9, 0x0b, 0x81, 0x22, 0x59, 0xfc, 0xb1, 0x3b, 0xdf, 0x58, 0x57, 0x35, 0xab, 0x9a,
	0x9f, 0x43, 0x0d, 0x13, 0xea, 0xa4, 0xf2, 0x42, 0xa0, 0x70, 0xca, 0xef, 0xc2, 0x9f, 0x3a, 0xbb,
	0x06, 0x56, 0x23, 0x8a, 0x8e, 0x2e, 0x9b, 0x4a, 0x2a, 0xef, 0x8f, 0x2a, 0x89, 0x7b, 0xac, 0x27,
	0xf1, 0xb4, 0xc6, 0x75, 0x45, 0x1d, 0xc8, 0x7a, 0xac, 0xd7, 0xe6, 0x61, 0xc0, 0xec, 0x8c, 0xba,
	0x99, 0xd4, 0xb4, 0x04, 0xe9, 0x56, 0xf3, 0xd0, 0xfe, 0xaf, 0x60, 0x79, 0x34, 0x0c, 0xb2, 0x16,
	0x18, 0x14, 0x9a, 0x8b, 0x27, 0x74, 0xf7, 0x6b, 0x14, 0xeb, 0x46, 0x14, 0xb2, 0xb9, 0x11, 0x04,
	0x2c, 0x12, 0x7f, 0x0a, 0xa4, 0xfe, 0x4c, 0xc0, 0xd2, 0x62, 0x74, 0x1f, 0xe0, 0x04, 0xc3, 0x4e,
	0x97, 0xc9, 0x78, 0xe9, 0xc8, 0x6d, 0xe3, 0xff, 0x74, 0xe6, 0x80, 0x09, 0xdd, 0x86, 0x9c, 0x9e,
	0x53, 0xf6, 0xd3, 0xe2, 0x4c, 0x4c, 0x72, 0xc6, 0xac, 0x93, 0xa9, 0x8c, 0x5c, 0x7d, 0x2c, 0x63,
	0x84, 0xe5, 0xcc, 0x01, 0x93, 0x83, 0xd2, 0xeb, 0xd0, 0x25, 0x6f, 0x43, 0x97, 0xbc, 0x0f, 0x5d,
	0xf2, 0xf4, 0xe1, 0xfe, 0xbb, 0xb1, 0xd4, 0x33, 0xda, 0xfb, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xe8,
	0xc4, 0x6d, 0x37, 0x77, 0x03, 0x00, 0x00,
}
